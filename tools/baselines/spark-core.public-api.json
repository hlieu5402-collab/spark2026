  "pub fn spark_core::DecodeContext<'a>::budget(&self) -> core::option::Option<&'a spark_core::types::Budget>",
  "pub fn spark_core::DecodeContext<'a>::with_limits(allocator: &'a dyn spark_core::buffer::BufferAllocator, budget: core::option::Option<&'a spark_core::types::Budget>, max_frame_size: core::option::Option<usize>, max_recursion_depth: core::option::Option<core::num::nonzero::NonZeroU16>) -> Self",
  "pub fn spark_core::EncodeContext<'a>::budget(&self) -> core::option::Option<&'a spark_core::types::Budget>",
  "pub fn spark_core::EncodeContext<'a>::with_limits(allocator: &'a dyn spark_core::buffer::BufferAllocator, budget: core::option::Option<&'a spark_core::types::Budget>, max_frame_size: core::option::Option<usize>, max_recursion_depth: core::option::Option<core::num::nonzero::NonZeroU16>) -> Self",
  "pub fn spark_core::context::ExecutionContext<'a>::budget(&self, kind: &spark_core::types::BudgetKind) -> core::option::Option<&'a spark_core::types::Budget>",
  "pub fn spark_core::context::ExecutionContext<'a>::budgets(&self) -> core::slice::iter::Iter<'a, spark_core::types::Budget>",
  "pub fn spark_core::context::ExecutionContext<'a>::new(cancellation: &'a spark_core::contract::Cancellation, deadline: spark_core::contract::Deadline, budgets: &'a [spark_core::types::Budget]) -> Self",
  "#[non_exhaustive] pub enum spark_core::types::BudgetDecision",
  "pub spark_core::types::BudgetDecision::Exhausted",
  "pub spark_core::types::BudgetDecision::Exhausted::snapshot: spark_core::types::BudgetSnapshot",
  "pub spark_core::types::BudgetDecision::Granted",
  "pub spark_core::types::BudgetDecision::Granted::snapshot: spark_core::types::BudgetSnapshot",
  "impl spark_core::types::BudgetDecision",
  "pub fn spark_core::types::BudgetDecision::is_granted(&self) -> bool",
  "pub fn spark_core::types::BudgetDecision::snapshot(&self) -> &spark_core::types::BudgetSnapshot",
  "impl core::clone::Clone for spark_core::types::BudgetDecision",
  "pub fn spark_core::types::BudgetDecision::clone(&self) -> spark_core::types::BudgetDecision",
  "impl core::cmp::Eq for spark_core::types::BudgetDecision",
  "impl core::cmp::PartialEq for spark_core::types::BudgetDecision",
  "pub fn spark_core::types::BudgetDecision::eq(&self, other: &spark_core::types::BudgetDecision) -> bool",
  "impl core::fmt::Debug for spark_core::types::BudgetDecision",
  "pub fn spark_core::types::BudgetDecision::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result",
  "impl core::marker::StructuralPartialEq for spark_core::types::BudgetDecision",
  "impl core::marker::Freeze for spark_core::types::BudgetDecision",
  "impl core::marker::Send for spark_core::types::BudgetDecision",
  "impl core::marker::Sync for spark_core::types::BudgetDecision",
  "impl core::marker::Unpin for spark_core::types::BudgetDecision",
  "impl core::panic::unwind_safe::RefUnwindSafe for spark_core::types::BudgetDecision",
  "impl core::panic::unwind_safe::UnwindSafe for spark_core::types::BudgetDecision",
  "#[non_exhaustive] pub enum spark_core::types::BudgetKind",
  "pub spark_core::types::BudgetKind::Custom(alloc::sync::Arc<str>)",
  "pub spark_core::types::BudgetKind::Decode",
  "pub spark_core::types::BudgetKind::Flow",
  "impl spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::custom(name: impl core::convert::Into<alloc::sync::Arc<str>>) -> Self",
  "impl core::clone::Clone for spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::clone(&self) -> spark_core::types::BudgetKind",
  "impl core::cmp::Eq for spark_core::types::BudgetKind",
  "impl core::cmp::PartialEq for spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::eq(&self, other: &spark_core::types::BudgetKind) -> bool",
  "impl core::fmt::Debug for spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result",
  "impl core::hash::Hash for spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::hash<__H: core::hash::Hasher>(&self, state: &mut __H)",
  "impl core::marker::StructuralPartialEq for spark_core::types::BudgetKind",
  "impl core::marker::Freeze for spark_core::types::BudgetKind",
  "impl core::marker::Send for spark_core::types::BudgetKind",
  "impl core::marker::Sync for spark_core::types::BudgetKind",
  "impl core::marker::Unpin for spark_core::types::BudgetKind",
  "impl core::panic::unwind_safe::RefUnwindSafe for spark_core::types::BudgetKind",
  "impl core::panic::unwind_safe::UnwindSafe for spark_core::types::BudgetKind",
  "pub struct spark_core::types::Budget",
  "impl spark_core::types::Budget",
  "pub fn spark_core::types::Budget::kind(&self) -> &spark_core::types::BudgetKind",
  "pub fn spark_core::types::Budget::limit(&self) -> u64",
  "pub fn spark_core::types::Budget::new(kind: spark_core::types::BudgetKind, limit: u64) -> Self",
  "pub fn spark_core::types::Budget::refund(&self, amount: u64)",
  "pub fn spark_core::types::Budget::remaining(&self) -> u64",
  "pub fn spark_core::types::Budget::snapshot(&self) -> spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::Budget::try_consume(&self, amount: u64) -> spark_core::types::BudgetDecision",
  "pub fn spark_core::types::Budget::unbounded(kind: spark_core::types::BudgetKind) -> Self",
  "impl core::clone::Clone for spark_core::types::Budget",
  "pub fn spark_core::types::Budget::clone(&self) -> spark_core::types::Budget",
  "impl core::fmt::Debug for spark_core::types::Budget",
  "pub fn spark_core::types::Budget::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result",
  "impl core::marker::Freeze for spark_core::types::Budget",
  "impl core::marker::Send for spark_core::types::Budget",
  "impl core::marker::Sync for spark_core::types::Budget",
  "impl core::marker::Unpin for spark_core::types::Budget",
  "impl core::panic::unwind_safe::RefUnwindSafe for spark_core::types::Budget",
  "impl core::panic::unwind_safe::UnwindSafe for spark_core::types::Budget",
  "pub struct spark_core::types::BudgetSnapshot",
  "impl spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::BudgetSnapshot::kind(&self) -> &spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetSnapshot::limit(&self) -> u64",
  "pub fn spark_core::types::BudgetSnapshot::new(kind: spark_core::types::BudgetKind, remaining: u64, limit: u64) -> Self",
  "pub fn spark_core::types::BudgetSnapshot::remaining(&self) -> u64",
  "impl core::clone::Clone for spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::BudgetSnapshot::clone(&self) -> spark_core::types::BudgetSnapshot",
  "impl core::cmp::Eq for spark_core::types::BudgetSnapshot",
  "impl core::cmp::PartialEq for spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::BudgetSnapshot::eq(&self, other: &spark_core::types::BudgetSnapshot) -> bool",
  "impl core::convert::From<&spark_core::types::BudgetSnapshot> for spark_core::status::ready::SubscriptionBudget",
  "pub fn spark_core::status::ready::SubscriptionBudget::from(snapshot: &spark_core::types::BudgetSnapshot) -> Self",
  "impl core::fmt::Debug for spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::BudgetSnapshot::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result",
  "impl core::marker::StructuralPartialEq for spark_core::types::BudgetSnapshot",
  "impl core::marker::Freeze for spark_core::types::BudgetSnapshot",
  "impl core::marker::Send for spark_core::types::BudgetSnapshot",
  "impl core::marker::Sync for spark_core::types::BudgetSnapshot",
  "impl core::marker::Unpin for spark_core::types::BudgetSnapshot",
  "impl core::panic::unwind_safe::RefUnwindSafe for spark_core::types::BudgetSnapshot",
  "impl core::panic::unwind_safe::UnwindSafe for spark_core::types::BudgetSnapshot",
  "pub fn spark_core::contract::CallContext::budget(&self, kind: &spark_core::types::BudgetKind) -> core::option::Option<spark_core::types::Budget>",
  "pub fn spark_core::contract::CallContext::budgets(&self) -> impl core::iter::traits::iterator::Iterator<Item = &spark_core::types::Budget>",
  "pub fn spark_core::contract::CallContextBuilder::add_budget(self, budget: spark_core::types::Budget) -> Self",
  "pub fn spark_core::error::category_matrix::BudgetDisposition::to_budget_kind(self) -> spark_core::types::BudgetKind",
  "pub spark_core::error::ErrorCategory::ResourceExhausted(spark_core::types::BudgetKind)",
  "pub fn spark_core::SloPolicyManager::evaluate_snapshot(&self, snapshot: &spark_core::types::BudgetSnapshot) -> alloc::vec::Vec<spark_core::SloPolicyDirective>",
  "pub fn spark_core::SloPolicyRule::budget_kind(&self) -> &spark_core::types::BudgetKind",
  "pub fn spark_core::SloPolicyRule::new(rule_id: alloc::sync::Arc<str>, budget_kind: spark_core::types::BudgetKind, trigger: spark_core::SloPolicyTrigger, action: spark_core::SloPolicyAction, summary: core::option::Option<alloc::sync::Arc<str>>) -> Self",
  "pub fn spark_core::status::ready::ReadyState::from_budget_decision(decision: &spark_core::types::BudgetDecision) -> Self",
  "impl core::convert::From<&spark_core::types::BudgetSnapshot> for spark_core::status::ready::SubscriptionBudget",
  "pub fn spark_core::status::ready::SubscriptionBudget::from(snapshot: &spark_core::types::BudgetSnapshot) -> Self",
  "pub fn spark_core::status::ready::ReadyState::from_budget_decision(decision: &spark_core::types::BudgetDecision) -> Self",
  "impl core::convert::From<&spark_core::types::BudgetSnapshot> for spark_core::status::ready::SubscriptionBudget",
  "pub fn spark_core::status::ready::SubscriptionBudget::from(snapshot: &spark_core::types::BudgetSnapshot) -> Self",
  "pub spark_core::BudgetDecision::Exhausted::snapshot: spark_core::types::BudgetSnapshot",
  "pub spark_core::BudgetDecision::Granted::snapshot: spark_core::types::BudgetSnapshot",
  "impl spark_core::types::BudgetDecision",
  "pub fn spark_core::types::BudgetDecision::is_granted(&self) -> bool",
  "pub fn spark_core::types::BudgetDecision::snapshot(&self) -> &spark_core::types::BudgetSnapshot",
  "impl core::clone::Clone for spark_core::types::BudgetDecision",
  "pub fn spark_core::types::BudgetDecision::clone(&self) -> spark_core::types::BudgetDecision",
  "impl core::cmp::Eq for spark_core::types::BudgetDecision",
  "impl core::cmp::PartialEq for spark_core::types::BudgetDecision",
  "pub fn spark_core::types::BudgetDecision::eq(&self, other: &spark_core::types::BudgetDecision) -> bool",
  "impl core::fmt::Debug for spark_core::types::BudgetDecision",
  "pub fn spark_core::types::BudgetDecision::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result",
  "impl core::marker::StructuralPartialEq for spark_core::types::BudgetDecision",
  "impl core::marker::Freeze for spark_core::types::BudgetDecision",
  "impl core::marker::Send for spark_core::types::BudgetDecision",
  "impl core::marker::Sync for spark_core::types::BudgetDecision",
  "impl core::marker::Unpin for spark_core::types::BudgetDecision",
  "impl core::panic::unwind_safe::RefUnwindSafe for spark_core::types::BudgetDecision",
  "impl core::panic::unwind_safe::UnwindSafe for spark_core::types::BudgetDecision",
  "impl spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::custom(name: impl core::convert::Into<alloc::sync::Arc<str>>) -> Self",
  "impl core::clone::Clone for spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::clone(&self) -> spark_core::types::BudgetKind",
  "impl core::cmp::Eq for spark_core::types::BudgetKind",
  "impl core::cmp::PartialEq for spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::eq(&self, other: &spark_core::types::BudgetKind) -> bool",
  "impl core::fmt::Debug for spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result",
  "impl core::hash::Hash for spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetKind::hash<__H: core::hash::Hasher>(&self, state: &mut __H)",
  "impl core::marker::StructuralPartialEq for spark_core::types::BudgetKind",
  "impl core::marker::Freeze for spark_core::types::BudgetKind",
  "impl core::marker::Send for spark_core::types::BudgetKind",
  "impl core::marker::Sync for spark_core::types::BudgetKind",
  "impl core::marker::Unpin for spark_core::types::BudgetKind",
  "impl core::panic::unwind_safe::RefUnwindSafe for spark_core::types::BudgetKind",
  "impl core::panic::unwind_safe::UnwindSafe for spark_core::types::BudgetKind",
  "pub spark_core::ErrorCategory::ResourceExhausted(spark_core::types::BudgetKind)",
  "pub fn spark_core::status::ready::ReadyState::from_budget_decision(decision: &spark_core::types::BudgetDecision) -> Self",
  "impl spark_core::types::Budget",
  "pub fn spark_core::types::Budget::kind(&self) -> &spark_core::types::BudgetKind",
  "pub fn spark_core::types::Budget::limit(&self) -> u64",
  "pub fn spark_core::types::Budget::new(kind: spark_core::types::BudgetKind, limit: u64) -> Self",
  "pub fn spark_core::types::Budget::refund(&self, amount: u64)",
  "pub fn spark_core::types::Budget::remaining(&self) -> u64",
  "pub fn spark_core::types::Budget::snapshot(&self) -> spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::Budget::try_consume(&self, amount: u64) -> spark_core::types::BudgetDecision",
  "pub fn spark_core::types::Budget::unbounded(kind: spark_core::types::BudgetKind) -> Self",
  "impl core::clone::Clone for spark_core::types::Budget",
  "pub fn spark_core::types::Budget::clone(&self) -> spark_core::types::Budget",
  "impl core::fmt::Debug for spark_core::types::Budget",
  "pub fn spark_core::types::Budget::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result",
  "impl core::marker::Freeze for spark_core::types::Budget",
  "impl core::marker::Send for spark_core::types::Budget",
  "impl core::marker::Sync for spark_core::types::Budget",
  "impl core::marker::Unpin for spark_core::types::Budget",
  "impl core::panic::unwind_safe::RefUnwindSafe for spark_core::types::Budget",
  "impl core::panic::unwind_safe::UnwindSafe for spark_core::types::Budget",
  "impl spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::BudgetSnapshot::kind(&self) -> &spark_core::types::BudgetKind",
  "pub fn spark_core::types::BudgetSnapshot::limit(&self) -> u64",
  "pub fn spark_core::types::BudgetSnapshot::new(kind: spark_core::types::BudgetKind, remaining: u64, limit: u64) -> Self",
  "pub fn spark_core::types::BudgetSnapshot::remaining(&self) -> u64",
  "impl core::clone::Clone for spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::BudgetSnapshot::clone(&self) -> spark_core::types::BudgetSnapshot",
  "impl core::cmp::Eq for spark_core::types::BudgetSnapshot",
  "impl core::cmp::PartialEq for spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::BudgetSnapshot::eq(&self, other: &spark_core::types::BudgetSnapshot) -> bool",
  "impl core::convert::From<&spark_core::types::BudgetSnapshot> for spark_core::status::ready::SubscriptionBudget",
  "pub fn spark_core::status::ready::SubscriptionBudget::from(snapshot: &spark_core::types::BudgetSnapshot) -> Self",
  "impl core::fmt::Debug for spark_core::types::BudgetSnapshot",
  "pub fn spark_core::types::BudgetSnapshot::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result",
  "impl core::marker::StructuralPartialEq for spark_core::types::BudgetSnapshot",
  "impl core::marker::Freeze for spark_core::types::BudgetSnapshot",
  "impl core::marker::Send for spark_core::types::BudgetSnapshot",
  "impl core::marker::Sync for spark_core::types::BudgetSnapshot",
  "impl core::marker::Unpin for spark_core::types::BudgetSnapshot",
  "impl core::panic::unwind_safe::RefUnwindSafe for spark_core::types::BudgetSnapshot",
  "impl core::panic::unwind_safe::UnwindSafe for spark_core::types::BudgetSnapshot",
  "pub fn spark_core::contract::CallContext::budget(&self, kind: &spark_core::types::BudgetKind) -> core::option::Option<spark_core::types::Budget>",
  "pub fn spark_core::contract::CallContext::budgets(&self) -> impl core::iter::traits::iterator::Iterator<Item = &spark_core::types::Budget>",
  "pub fn spark_core::contract::CallContextBuilder::add_budget(self, budget: spark_core::types::Budget) -> Self",
  "pub fn spark_core::DecodeContext<'a>::budget(&self) -> core::option::Option<&'a spark_core::types::Budget>",
  "pub fn spark_core::DecodeContext<'a>::with_limits(allocator: &'a dyn spark_core::buffer::BufferAllocator, budget: core::option::Option<&'a spark_core::types::Budget>, max_frame_size: core::option::Option<usize>, max_recursion_depth: core::option::Option<core::num::nonzero::NonZeroU16>) -> Self",
  "pub fn spark_core::EncodeContext<'a>::budget(&self) -> core::option::Option<&'a spark_core::types::Budget>",
  "pub fn spark_core::EncodeContext<'a>::with_limits(allocator: &'a dyn spark_core::buffer::BufferAllocator, budget: core::option::Option<&'a spark_core::types::Budget>, max_frame_size: core::option::Option<usize>, max_recursion_depth: core::option::Option<core::num::nonzero::NonZeroU16>) -> Self",
  "pub fn spark_core::context::ExecutionContext<'a>::budget(&self, kind: &spark_core::types::BudgetKind) -> core::option::Option<&'a spark_core::types::Budget>",
  "pub fn spark_core::context::ExecutionContext<'a>::budgets(&self) -> core::slice::iter::Iter<'a, spark_core::types::Budget>",
  "pub fn spark_core::context::ExecutionContext<'a>::new(cancellation: &'a spark_core::contract::Cancellation, deadline: spark_core::contract::Deadline, budgets: &'a [spark_core::types::Budget]) -> Self",
  "pub fn spark_core::SloPolicyManager::evaluate_snapshot(&self, snapshot: &spark_core::types::BudgetSnapshot) -> alloc::vec::Vec<spark_core::SloPolicyDirective>",
  "pub fn spark_core::SloPolicyRule::budget_kind(&self) -> &spark_core::types::BudgetKind",
  "pub fn spark_core::SloPolicyRule::new(rule_id: alloc::sync::Arc<str>, budget_kind: spark_core::types::BudgetKind, trigger: spark_core::SloPolicyTrigger, action: spark_core::SloPolicyAction, summary: core::option::Option<alloc::sync::Arc<str>>) -> Self",
  "impl core::convert::From<&spark_core::types::BudgetSnapshot> for spark_core::status::ready::SubscriptionBudget",
  "pub fn spark_core::status::ready::SubscriptionBudget::from(snapshot: &spark_core::types::BudgetSnapshot) -> Self",
