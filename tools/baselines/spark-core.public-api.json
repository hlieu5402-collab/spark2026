  "pub struct spark_core::context::Context<'a>",
  "pub type spark_core::context::ExecutionContext<'a> = spark_core::context::Context<'a>",
  "impl<'a> spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::budget(&self, kind: &spark_core::types::BudgetKind) -> core::option::Option<&'a spark_core::types::Budget>",
  "pub fn spark_core::context::Context<'a>::budgets(&self) -> core::slice::iter::Iter<'a, spark_core::types::Budget>",
  "pub fn spark_core::context::Context<'a>::cancellation(&self) -> &'a spark_core::contract::Cancellation",
  "pub fn spark_core::context::Context<'a>::deadline(&self) -> spark_core::contract::Deadline",
  "pub fn spark_core::context::Context<'a>::new(cancellation: &'a spark_core::contract::Cancellation, deadline: spark_core::contract::Deadline, budgets: &'a [spark_core::types::Budget]) -> Self",
  "impl<'a> core::clone::Clone for spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::clone(&self) -> spark_core::context::Context<'a>",
  "impl<'a> core::convert::From<&'a spark_core::contract::CallContext> for spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::from(ctx: &'a spark_core::contract::CallContext) -> Self",
  "impl<'a> core::marker::Copy for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Freeze for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Send for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Sync for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Unpin for spark_core::context::Context<'a>",
  "impl<'a> core::panic::unwind_safe::RefUnwindSafe for spark_core::context::Context<'a>",
  "impl<'a> core::panic::unwind_safe::UnwindSafe for spark_core::context::Context<'a>",
  "pub fn spark_core::contract::CallContext::execution(&self) -> spark_core::context::Context<'_>",
  "impl<'a> core::convert::From<&'a spark_core::contract::CallContext> for spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::from(ctx: &'a spark_core::contract::CallContext) -> Self",
  "pub fn spark_core::pipeline::context::Context::execution_context(&self) -> spark_core::context::Context<'_>",
  "pub fn spark_core::pipeline::Context::execution_context(&self) -> spark_core::context::Context<'_>",
  "pub fn spark_core::contract::CallContext::execution(&self) -> spark_core::context::Context<'_>",
  "impl<'a> core::convert::From<&'a spark_core::contract::CallContext> for spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::from(ctx: &'a spark_core::contract::CallContext) -> Self",
  "pub struct spark_core::prelude::Context<'a>",
  "pub type spark_core::prelude::ExecutionContext<'a> = spark_core::context::ExecutionContext<'a>",
  "impl<'a> spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::budget(&self, kind: &spark_core::types::BudgetKind) -> core::option::Option<&'a spark_core::types::Budget>",
  "pub fn spark_core::context::Context<'a>::budgets(&self) -> core::slice::iter::Iter<'a, spark_core::types::Budget>",
  "pub fn spark_core::context::Context<'a>::cancellation(&self) -> &'a spark_core::contract::Cancellation",
  "pub fn spark_core::context::Context<'a>::deadline(&self) -> spark_core::contract::Deadline",
  "pub fn spark_core::context::Context<'a>::new(cancellation: &'a spark_core::contract::Cancellation, deadline: spark_core::contract::Deadline, budgets: &'a [spark_core::types::Budget]) -> Self",
  "impl<'a> core::clone::Clone for spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::clone(&self) -> spark_core::context::Context<'a>",
  "impl<'a> core::convert::From<&'a spark_core::contract::CallContext> for spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::from(ctx: &'a spark_core::contract::CallContext) -> Self",
  "impl<'a> core::marker::Copy for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Freeze for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Send for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Sync for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Unpin for spark_core::context::Context<'a>",
  "impl<'a> core::panic::unwind_safe::RefUnwindSafe for spark_core::context::Context<'a>",
  "impl<'a> core::panic::unwind_safe::UnwindSafe for spark_core::context::Context<'a>",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::prelude::DynService::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::prelude::Service::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SimpleServiceFn<F>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SequentialService<L>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::auto_dyn::DynBridge<S, Request>::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub struct spark_core::rt::sugar::PipelineContextCaps<'a, C: spark_core::pipeline::context::Context + ?core::marker::Sized>",
  "pub type spark_core::rt::sugar::ContextCaps<'a, C> = spark_core::rt::sugar::PipelineContextCaps<'a, C>",
  "impl<'a, C: spark_core::pipeline::context::Context + ?core::marker::Sized> spark_core::rt::sugar::PipelineContextCaps<'a, C>",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::context(&self) -> &'a C",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::new(context: &'a C) -> Self",
  "impl<'a, C: core::clone::Clone + spark_core::pipeline::context::Context + ?core::marker::Sized> core::clone::Clone for spark_core::rt::sugar::PipelineContextCaps<'a, C>",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::clone(&self) -> spark_core::rt::sugar::PipelineContextCaps<'a, C>",
  "impl<'a, C: core::marker::Copy + spark_core::pipeline::context::Context + ?core::marker::Sized> core::marker::Copy for spark_core::rt::sugar::PipelineContextCaps<'a, C>",
  "impl<'a, C> spark_core::rt::sugar::RuntimeCaps for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: spark_core::pipeline::context::Context + ?core::marker::Sized",
  "pub type spark_core::rt::sugar::PipelineContextCaps<'a, C>::Join<T: core::marker::Send + 'static> = spark_core::JoinHandle<T>",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::spawn_with<F>(&self, ctx: &spark_core::contract::CallContext, fut: F) -> Self::Join where F: core::future::future::Future + core::marker::Send + 'static, <F as core::future::future::Future>::Output: core::marker::Send + 'static",
  "impl<'a, C> core::marker::Freeze for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: ?core::marker::Sized",
  "impl<'a, C> core::marker::Send for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: ?core::marker::Sized",
  "impl<'a, C> core::marker::Sync for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: ?core::marker::Sized",
  "impl<'a, C> core::marker::Unpin for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: ?core::marker::Sized",
  "impl<'a, C> core::panic::unwind_safe::RefUnwindSafe for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: core::panic::unwind_safe::RefUnwindSafe + ?core::marker::Sized",
  "impl<'a, C> core::panic::unwind_safe::UnwindSafe for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: core::panic::unwind_safe::RefUnwindSafe + ?core::marker::Sized",
  "impl<'a, C> spark_core::rt::sugar::RuntimeCaps for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: spark_core::pipeline::context::Context + ?core::marker::Sized",
  "pub type spark_core::rt::sugar::PipelineContextCaps<'a, C>::Join<T: core::marker::Send + 'static> = spark_core::JoinHandle<T>",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::spawn_with<F>(&self, ctx: &spark_core::contract::CallContext, fut: F) -> Self::Join where F: core::future::future::Future + core::marker::Send + 'static, <F as core::future::future::Future>::Output: core::marker::Send + 'static",
  "pub struct spark_core::rt::PipelineContextCaps<'a, C: spark_core::pipeline::context::Context + ?core::marker::Sized>",
  "impl<'a, C: spark_core::pipeline::context::Context + ?core::marker::Sized> spark_core::rt::sugar::PipelineContextCaps<'a, C>",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::context(&self) -> &'a C",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::new(context: &'a C) -> Self",
  "impl<'a, C: core::clone::Clone + spark_core::pipeline::context::Context + ?core::marker::Sized> core::clone::Clone for spark_core::rt::sugar::PipelineContextCaps<'a, C>",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::clone(&self) -> spark_core::rt::sugar::PipelineContextCaps<'a, C>",
  "impl<'a, C: core::marker::Copy + spark_core::pipeline::context::Context + ?core::marker::Sized> core::marker::Copy for spark_core::rt::sugar::PipelineContextCaps<'a, C>",
  "impl<'a, C> spark_core::rt::sugar::RuntimeCaps for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: spark_core::pipeline::context::Context + ?core::marker::Sized",
  "pub type spark_core::rt::sugar::PipelineContextCaps<'a, C>::Join<T: core::marker::Send + 'static> = spark_core::JoinHandle<T>",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::spawn_with<F>(&self, ctx: &spark_core::contract::CallContext, fut: F) -> Self::Join where F: core::future::future::Future + core::marker::Send + 'static, <F as core::future::future::Future>::Output: core::marker::Send + 'static",
  "impl<'a, C> core::marker::Freeze for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: ?core::marker::Sized",
  "impl<'a, C> core::marker::Send for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: ?core::marker::Sized",
  "impl<'a, C> core::marker::Sync for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: ?core::marker::Sized",
  "impl<'a, C> core::marker::Unpin for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: ?core::marker::Sized",
  "impl<'a, C> core::panic::unwind_safe::RefUnwindSafe for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: core::panic::unwind_safe::RefUnwindSafe + ?core::marker::Sized",
  "impl<'a, C> core::panic::unwind_safe::UnwindSafe for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: core::panic::unwind_safe::RefUnwindSafe + ?core::marker::Sized",
  "impl<'a, C> spark_core::rt::sugar::RuntimeCaps for spark_core::rt::sugar::PipelineContextCaps<'a, C> where C: spark_core::pipeline::context::Context + ?core::marker::Sized",
  "pub type spark_core::rt::sugar::PipelineContextCaps<'a, C>::Join<T: core::marker::Send + 'static> = spark_core::JoinHandle<T>",
  "pub fn spark_core::rt::sugar::PipelineContextCaps<'a, C>::spawn_with<F>(&self, ctx: &spark_core::contract::CallContext, fut: F) -> Self::Join where F: core::future::future::Future + core::marker::Send + 'static, <F as core::future::future::Future>::Output: core::marker::Send + 'static",
  "pub fn spark_core::service::auto_dyn::DynBridge<S, Request>::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SequentialService<L>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SimpleServiceFn<F>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::traits::generic::Service::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SimpleServiceFn<F>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SequentialService<L>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::auto_dyn::DynBridge<S, Request>::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::traits::object::DynService::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::traits::DynService::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::traits::Service::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SimpleServiceFn<F>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SequentialService<L>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::auto_dyn::DynBridge<S, Request>::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::auto_dyn::DynBridge<S, Request>::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::simple::SimpleServiceFn<F>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::DynService::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::Service::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SimpleServiceFn<F>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SequentialService<L>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::auto_dyn::DynBridge<S, Request>::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::transport::traits::generic::ServerTransport::local_addr(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::generic::ServerTransport::shutdown(&self, ctx: &spark_core::context::Context<'_>, plan: spark_core::transport::server::ListenerShutdown) -> Self::ShutdownFuture",
  "pub fn spark_core::transport::traits::generic::TransportFactory::bind<P>(&self, ctx: &spark_core::context::Context<'_>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<P>) -> Self::BindFuture where P: spark_core::pipeline::traits::generic::ControllerFactory + core::marker::Send + core::marker::Sync + 'static, <P as spark_core::pipeline::traits::generic::ControllerFactory>::Controller: spark_core::pipeline::controller::Controller",
  "pub fn spark_core::transport::traits::generic::TransportFactory::connect(&self, ctx: &spark_core::context::Context<'_>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> Self::ConnectFuture",
  "pub fn spark_core::transport::traits::generic::TransportFactory::scheme(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::object::DynServerTransport::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::object::DynServerTransport::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::DynTransportFactory::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::DynTransportFactory::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::DynTransportFactory::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::DynServerTransport::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::DynServerTransport::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::DynTransportFactory::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::DynTransportFactory::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::DynTransportFactory::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::ServerTransport::local_addr(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::ServerTransport::shutdown(&self, ctx: &spark_core::context::Context<'_>, plan: spark_core::transport::server::ListenerShutdown) -> Self::ShutdownFuture",
  "pub fn spark_core::transport::traits::TransportFactory::bind<P>(&self, ctx: &spark_core::context::Context<'_>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<P>) -> Self::BindFuture where P: spark_core::pipeline::traits::generic::ControllerFactory + core::marker::Send + core::marker::Sync + 'static, <P as spark_core::pipeline::traits::generic::ControllerFactory>::Controller: spark_core::pipeline::controller::Controller",
  "pub fn spark_core::transport::traits::TransportFactory::connect(&self, ctx: &spark_core::context::Context<'_>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> Self::ConnectFuture",
  "pub fn spark_core::transport::traits::TransportFactory::scheme(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::DynServerTransport::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::DynServerTransport::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::DynTransportFactory::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::DynTransportFactory::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::DynTransportFactory::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::ServerTransport::local_addr(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::ServerTransport::shutdown(&self, ctx: &spark_core::context::Context<'_>, plan: spark_core::transport::server::ListenerShutdown) -> Self::ShutdownFuture",
  "pub fn spark_core::transport::TransportFactory::bind<P>(&self, ctx: &spark_core::context::Context<'_>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<P>) -> Self::BindFuture where P: spark_core::pipeline::traits::generic::ControllerFactory + core::marker::Send + core::marker::Sync + 'static, <P as spark_core::pipeline::traits::generic::ControllerFactory>::Controller: spark_core::pipeline::controller::Controller",
  "pub fn spark_core::transport::TransportFactory::connect(&self, ctx: &spark_core::context::Context<'_>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> Self::ConnectFuture",
  "pub fn spark_core::transport::TransportFactory::scheme(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::contract::CallContext::execution(&self) -> spark_core::context::Context<'_>",
  "impl<'a> core::convert::From<&'a spark_core::contract::CallContext> for spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::from(ctx: &'a spark_core::contract::CallContext) -> Self",
  "pub struct spark_core::Context<'a>",
  "pub type spark_core::ExecutionContext<'a> = spark_core::context::ExecutionContext<'a>",
  "impl<'a> spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::budget(&self, kind: &spark_core::types::BudgetKind) -> core::option::Option<&'a spark_core::types::Budget>",
  "pub fn spark_core::context::Context<'a>::budgets(&self) -> core::slice::iter::Iter<'a, spark_core::types::Budget>",
  "pub fn spark_core::context::Context<'a>::cancellation(&self) -> &'a spark_core::contract::Cancellation",
  "pub fn spark_core::context::Context<'a>::deadline(&self) -> spark_core::contract::Deadline",
  "pub fn spark_core::context::Context<'a>::new(cancellation: &'a spark_core::contract::Cancellation, deadline: spark_core::contract::Deadline, budgets: &'a [spark_core::types::Budget]) -> Self",
  "impl<'a> core::clone::Clone for spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::clone(&self) -> spark_core::context::Context<'a>",
  "impl<'a> core::convert::From<&'a spark_core::contract::CallContext> for spark_core::context::Context<'a>",
  "pub fn spark_core::context::Context<'a>::from(ctx: &'a spark_core::contract::CallContext) -> Self",
  "impl<'a> core::marker::Copy for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Freeze for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Send for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Sync for spark_core::context::Context<'a>",
  "impl<'a> core::marker::Unpin for spark_core::context::Context<'a>",
  "impl<'a> core::panic::unwind_safe::RefUnwindSafe for spark_core::context::Context<'a>",
  "impl<'a> core::panic::unwind_safe::UnwindSafe for spark_core::context::Context<'a>",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::DynServerTransport::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::DynServerTransport::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::local_addr_dyn(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::transport::traits::object::ServerTransportObject<T>::shutdown_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, plan: spark_core::transport::server::ListenerShutdown) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<(), spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::DynService::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::service::traits::object::ServiceObject<S, Request, Response, Decode, Encode>::poll_ready_dyn(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<spark_core::error::SparkError>",
  "pub fn spark_core::DynTransportFactory::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::DynTransportFactory::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::DynTransportFactory::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::bind_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<dyn spark_core::pipeline::traits::object::DynControllerFactory>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::transport::traits::object::DynServerTransport>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::connect_dyn<'life0, 'life1, 'life2, 'async_trait>(&'life0 self, ctx: &'life1 spark_core::context::Context<'life2>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output = spark_core::error::Result<alloc::boxed::Box<dyn spark_core::pipeline::channel::Channel>, spark_core::error::CoreError>> + core::marker::Send + 'async_trait)>> where Self: 'async_trait, 'life0: 'async_trait, 'life1: 'async_trait, 'life2: 'async_trait",
  "pub fn spark_core::transport::traits::object::TransportFactoryObject<F>::scheme_dyn(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
  "pub fn spark_core::PipelineContext::execution_context(&self) -> spark_core::context::Context<'_>",
  "pub fn spark_core::ServerTransport::local_addr(&self, ctx: &spark_core::context::Context<'_>) -> spark_transport::addr::TransportSocketAddr",
  "pub fn spark_core::ServerTransport::shutdown(&self, ctx: &spark_core::context::Context<'_>, plan: spark_core::transport::server::ListenerShutdown) -> Self::ShutdownFuture",
  "pub fn spark_core::Service::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SimpleServiceFn<F>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::simple::SequentialService<L>::poll_ready(&mut self, _ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::service::auto_dyn::DynBridge<S, Request>::poll_ready(&mut self, ctx: &spark_core::context::Context<'_>, cx: &mut core::task::wake::Context<'_>) -> spark_core::status::ready::PollReady<Self::Error>",
  "pub fn spark_core::TransportFactory::bind<P>(&self, ctx: &spark_core::context::Context<'_>, config: spark_core::transport::factory::ListenerConfig, pipeline_factory: alloc::sync::Arc<P>) -> Self::BindFuture where P: spark_core::pipeline::traits::generic::ControllerFactory + core::marker::Send + core::marker::Sync + 'static, <P as spark_core::pipeline::traits::generic::ControllerFactory>::Controller: spark_core::pipeline::controller::Controller",
  "pub fn spark_core::TransportFactory::connect(&self, ctx: &spark_core::context::Context<'_>, intent: spark_core::transport::intent::ConnectionIntent, discovery: core::option::Option<alloc::sync::Arc<dyn spark_core::cluster::discovery::ServiceDiscovery>>) -> Self::ConnectFuture",
  "pub fn spark_core::TransportFactory::scheme(&self, ctx: &spark_core::context::Context<'_>) -> &'static str",
