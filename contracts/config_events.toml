# 配置事件契约（SOT）
#
# Why：
# - 统一控制面与审计面使用的事件语义，避免校准/漂移/一致性事件在多实现间出现字段漂移；
# - 通过单一事实来源（Single Source of Truth）驱动代码与文档生成，降低运行与治理团队的维护成本；
# - 为演练手册提供结构化元数据，确保跨团队能够按照一致步骤复现与验证配置治理流程。
#
# How：
# - 构建脚本 `spark-core/build.rs` 解析本文件生成 `src/configuration/events.rs`，同步产出事件结构体与元数据常量；
# - 文档生成器 `tools/gen_config_events_doc.rs` 读取本文件生成 `docs/configuration-events.md`；
# - CI 守门脚本会强制校验契约、代码、文档的同步更新。
#
# What：
# - `version`：契约版本号，用于文档与代码的头部声明；
# - `summary`：面向运维与开发的总体说明；
# - `structs`：复用的嵌套结构体定义；
# - `events`：核心事件枚举，包含字段、审计映射与演练用例。
#
# Trade-offs：
# - 当前仅覆盖校准/漂移/一致性三类事件，后续扩展需同步更新生成器；
# - 字段类型限定在 String/u64/布尔与嵌套列表，保持契约简洁。

version = "1.0.0"
summary = "配置控制面与审计事件的统一契约：覆盖自动校准、漂移检测与一致性恢复信号。"

[[structs]]
ident = "DriftNodeSnapshot"
summary = "描述检测到配置漂移的节点快照。"
rationale = "用于事件负载记录差异节点，便于审计与排障人员快速定位问题主机。"
description = "包含节点标识、哈希值以及漂移的配置键集合，生成器会根据该结构创建 `ConfigurationDriftDetected` 事件的嵌套字段。"

[[structs.fields]]
name = "node_id"
required = true
type = { kind = "string" }
doc = "节点逻辑标识，通常对应服务拓扑中的唯一 NodeId。"

[[structs.fields]]
name = "observed_hash"
required = true
type = { kind = "string" }
doc = "当前节点从本地状态计算出的配置哈希。"

[[structs.fields]]
name = "difference_keys"
required = true
type = { kind = "list", item = { kind = "string" } }
doc = "与期望配置相比存在差异的键集合，列表顺序在聚合器中会被排序以保证稳定 diff。"

[[structs.fields]]
name = "delta_score"
required = true
type = { kind = "u64" }
doc = "差异数量得分，通常等于 `difference_keys` 的长度，用于在事件中按照严重程度排序节点。"

[[events]]
ident = "ConfigurationCalibrationRequested"
code = "configuration.calibration.requested"
family = "calibration"
name = "配置校准请求"
severity = "info"
summary = "控制面向运行面发布的校准请求，用于触发目标节点重新拉取或对齐配置。"
description = "当观测到集群状态可能偏离（如心跳上报的哈希与控制面不一致）时，控制面会发送校准请求，并将关键信息记录到审计事件中，确保后续回放能够追踪责任节点与触发原因。"

[events.audit]
action = "configuration.calibration.request"
entity_kind = "configuration.profile"
entity_id_field = "profile_id"

[[events.fields]]
name = "profile_id"
required = true
type = { kind = "string" }
doc = "需要校准的配置 Profile 标识，对应类型 ProfileId。"

[[events.fields]]
name = "controller_id"
required = true
type = { kind = "string" }
doc = "发起校准的控制面节点或逻辑控制器 ID。"

[[events.fields]]
name = "expected_hash"
required = true
type = { kind = "string" }
doc = "控制面计算的期望配置哈希，用于对比节点上报数据。"

[[events.fields]]
name = "observed_hash"
required = true
type = { kind = "string" }
doc = "触发本次请求的节点哈希值，帮助快速定位偏差来源。"

[[events.fields]]
name = "reason"
required = false
type = { kind = "string" }
doc = "附加说明或触发原因，例如 \"hash_mismatch\"、\"stale_revision\"。"

[[events.drills]]
title = "单节点手动校准演练"
goal = "验证控制面能够针对特定节点下发校准请求并在审计事件中留下完整线索。"
setup = [
  "部署包含 1 控制面 + 1 业务节点的最小集群",
  "通过调试接口模拟节点上报过期哈希"
]
steps = [
  "触发控制面下发 `configuration.calibration.requested` 事件",
  "确认运行面重新拉取配置并回报最新哈希"
]
expectations = [
  "审计系统记录到事件，`profile_id`、`controller_id` 与哈希字段完整",
  "运行面节点在校准后哈希值与控制面一致"
]

[[events]]
ident = "ConfigurationDriftDetected"
code = "configuration.drift.detected"
family = "drift"
name = "配置漂移检测"
severity = "warning"
summary = "聚合多节点上报，识别集群内的配置漂移并输出结构化差异列表。"
description = "运行面每个节点周期性汇报配置哈希与差异键集合，控制面在窗口内汇总后生成漂移事件，事件负载需携带全部漂移节点及其差异详情，供审计与排障使用。"

[events.audit]
action = "configuration.drift.detected"
entity_kind = "configuration.profile"
entity_id_field = "profile_id"

[[events.fields]]
name = "profile_id"
required = true
type = { kind = "string" }
doc = "出现漂移的配置 Profile 标识。"

[[events.fields]]
name = "expected_hash"
required = true
type = { kind = "string" }
doc = "控制面认为的黄金配置哈希。"

[[events.fields]]
name = "majority_hash"
required = true
type = { kind = "string" }
doc = "在当前窗口内占多数的哈希值，便于评估漂移面是否集中。"

[[events.fields]]
name = "drift_window_ms"
required = true
type = { kind = "u64" }
doc = "漂移聚合的观测窗口大小（毫秒）。"

[[events.fields]]
name = "observed_node_count"
required = true
type = { kind = "u64" }
doc = "在窗口内上报的节点数量，用于评估样本覆盖度。"

[[events.fields]]
name = "divergent_nodes"
required = true
type = { kind = "list", item = { kind = "struct", ident = "DriftNodeSnapshot" } }
doc = "漂移节点的完整快照集合，按照差异得分降序排列。"

[[events.drills]]
title = "十节点漂移聚合与审计演练"
goal = "验证控制面能够在 10 个节点出现哈希分歧时正确聚合事件并生成审计记录。"
setup = [
  "部署 10 个业务节点并使其加载相同 Profile",
  "通过故障注入工具让其中若干节点写入不同配置键"
]
steps = [
  "收集所有节点的哈希与差异键集合并提交给聚合器",
  "调用聚合 API 生成 `configuration.drift.detected` 事件",
  "将事件传入审计系统，校验序列号、动作与实体标识"
]
expectations = [
  "事件中的 `divergent_nodes` 列表长度等于实际漂移节点数，且按差异数量排序",
  "审计事件的 `action` 为 `configuration.drift.detected`，`entity.kind` 为 `configuration.profile`",
  "`AuditChangeSet` 与输入的变更集合一致，确保后续回放可重现配置差异"
]

[[events]]
ident = "ConfigurationConsistencyRestored"
code = "configuration.consistency.restored"
family = "consistency"
name = "配置一致性恢复"
severity = "info"
summary = "通知治理与审计系统集群已恢复一致状态，便于闭环漂移处理流程。"
description = "在完成自动或人工校准后，控制面会发布一致性恢复事件，记录最终稳定哈希、耗时以及关联的漂移/校准事件 ID，形成完整的闭环证据链。"

[events.audit]
action = "configuration.consistency.restored"
entity_kind = "configuration.profile"
entity_id_field = "profile_id"

[[events.fields]]
name = "profile_id"
required = true
type = { kind = "string" }
doc = "恢复一致性的配置 Profile 标识。"

[[events.fields]]
name = "stable_hash"
required = true
type = { kind = "string" }
doc = "最终达成一致的哈希值。"

[[events.fields]]
name = "reconciled_nodes"
required = true
type = { kind = "list", item = { kind = "string" } }
doc = "成功完成校准的节点 ID 列表。"

[[events.fields]]
name = "duration_ms"
required = true
type = { kind = "u64" }
doc = "从漂移检测到一致性恢复的耗时（毫秒）。"

[[events.fields]]
name = "source_event_id"
required = false
type = { kind = "string" }
doc = "触发本次恢复的上游事件 ID（如漂移或校准事件），便于串联审计链。"

[[events.drills]]
title = "漂移恢复闭环演练"
goal = "验证从漂移检测到一致性恢复的全链路审计闭环。"
setup = [
  "先执行 \"十节点漂移聚合与审计演练\" 确保存在漂移事件",
  "完成手动或自动校准流程，使全部节点哈希一致"
]
steps = [
  "收集恢复后节点列表与耗时信息",
  "生成 `configuration.consistency.restored` 事件并写入审计系统"
]
expectations = [
  "事件记录 `stable_hash` 与所有节点 ID，`source_event_id` 指向之前的漂移事件",
  "审计系统能够根据恢复事件闭合哈希链"
]
