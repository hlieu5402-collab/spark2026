name: CI Guardrails Baseline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare-feature-matrix:
    name: 准备特性矩阵
    runs-on: ubuntu-latest
    outputs:
      feature-matrix: ${{ steps.generate.outputs.matrix }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 生成编译矩阵
        id: generate
        run: |
          MATRIX=$(tools/ci/feature_combos.sh)
          echo "matrix=${MATRIX}" >> "$GITHUB_OUTPUT"

  guardrails:
    name: Baseline Guardrails (${{ matrix.name }})
    needs: prepare-feature-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-feature-matrix.outputs.feature-matrix) }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ci-guardrails
          cache-on-failure: true

      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny

      - name: Install cargo-vet
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-vet

      - name: Install cargo-udeps
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-udeps

      - name: Install cargo-machete
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-machete

      - name: Install cargo-hakari
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hakari

      - name: Install cargo-public-api
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-public-api

      - name: 准备工件目录
        run: mkdir -p ci-artifacts

      - name: 格式检查 (cargo fmt)
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          cargo fmt --all --check 2>&1 | tee ci-artifacts/cargo-fmt.log

      - name: Clippy (cargo clippy)
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          cargo clippy --workspace --all-targets -- -D warnings 2>&1 | tee ci-artifacts/cargo-clippy.log

      - name: 单元测试 (cargo test)
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          cargo test --workspace 2>&1 | tee ci-artifacts/cargo-test.log

      - name: 构建 (cargo build)
        if: matrix.name != 'core-no-std-min'
        run: |
          set -eo pipefail
          cargo build --workspace ${{ matrix.cargo_flags }} 2>&1 | tee ci-artifacts/cargo-build-${{ matrix.name }}.log

      - name: 核心最小化检查 (cargo check)
        if: matrix.name == 'core-no-std-min'
        run: |
          set -eo pipefail
          cargo check -p spark-core --no-default-features 2>&1 | tee ci-artifacts/cargo-check-${{ matrix.name }}.log

      - name: no_std(alloc) 组合附加检查
        if: matrix.name == 'no-default-alloc'
        run: |
          set -eo pipefail
          CI_ARTIFACT_DIR="${{ github.workspace }}/ci-artifacts" tools/ci/no_std_matrix.sh

      - name: 生产代码 unwrap/expect 守门
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          CI_ARTIFACT_DIR="${{ github.workspace }}/ci-artifacts" tools/ci/grep_unwrap.sh

      - name: 核心与公共 crate 编译警告守门
        if: matrix.name == 'default'
        env:
          RUSTFLAGS: -D warnings
        run: |
          set -eo pipefail
          echo "::group::cargo check --workspace --all-targets (warnings as errors)"
          cargo check --workspace --all-targets 2>&1 | tee ci-artifacts/cargo-check-warnings.log
          echo "::endgroup::"

      - name: Cargo deny
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          cargo deny check bans licenses advisories sources 2>&1 | tee ci-artifacts/cargo-deny.log

      - name: Cargo vet
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          cargo vet check --locked 2>&1 | tee ci-artifacts/cargo-vet.log

      - name: Cargo udeps
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          cargo +nightly udeps --workspace --all-targets 2>&1 | tee ci-artifacts/cargo-udeps.log

      - name: Cargo machete
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          cargo machete 2>&1 | tee ci-artifacts/cargo-machete.log

      - name: Cargo hakari
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          set +e
          cargo hakari generate --diff 2>&1 | tee ci-artifacts/cargo-hakari.log
          status=$?
          set -e
          if [ "$status" -ne 0 ]; then
            if grep -q "hakari.toml" ci-artifacts/cargo-hakari.log; then
              echo "Hakari 配置缺失或未初始化，已在日志中记录并跳过强制失败。" | tee -a ci-artifacts/cargo-hakari.log
              exit 0
            fi
            exit "$status"
          fi

      - name: Cargo public-api diff
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          tools/ci/public_api_diff_budget.sh origin/main 0 2>&1 | tee ci-artifacts/cargo-public-api.log

      - name: 契约索引覆盖率
        if: matrix.name == 'default'
        run: |
          set -eo pipefail
          ./tools/ci/check_contracts_index.sh 2>&1 | tee ci-artifacts/contracts-index.log

      - name: 上传工件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: guardrails-${{ matrix.name }}
          path: ci-artifacts

  boot2-guard:
    name: BOOT-2 阻断守护
    needs: guardrails
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install cargo-public-api
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-public-api

      - name: 准备工件目录
        run: mkdir -p ci-artifacts

      - name: 命名 lint
        id: naming
        run: |
          set +e
          set -o pipefail
          python3 tools/ci/boot2_naming_lint.py --json-report ci-artifacts/boot2-naming.json 2>&1 | tee ci-artifacts/boot2-naming.log
          status=${PIPESTATUS[0]}
          set +o pipefail
          echo "status=${status}" >> "$GITHUB_OUTPUT"
          exit 0

      - name: spark-core 纯度
        id: core_purity
        run: |
          set +e
          set -o pipefail
          python3 tools/ci/boot2_core_purity.py --json-report ci-artifacts/boot2-core-purity.json 2>&1 | tee ci-artifacts/boot2-core-purity.log
          status=${PIPESTATUS[0]}
          set +o pipefail
          echo "status=${status}" >> "$GITHUB_OUTPUT"
          exit 0

      - name: 文档密度检查
        id: doc_density
        run: |
          set +e
          set -o pipefail
          python3 tools/check_doc_density.py 2>&1 | tee ci-artifacts/boot2-doc-density.log
          status=${PIPESTATUS[0]}
          set +o pipefail
          python3 tools/ci/boot2_doc_density_report.py --log ci-artifacts/boot2-doc-density.log --status "${status}" --json-report ci-artifacts/boot2-doc-density.json
          echo "status=${status}" >> "$GITHUB_OUTPUT"
          exit 0

      - name: 公共 API 预算
        id: public_api
        run: |
          set +e
          set -o pipefail
          tools/ci/public_api_diff_budget.sh origin/main 0 2>&1 | tee ci-artifacts/boot2-public-api.log
          status=${PIPESTATUS[0]}
          set +o pipefail
          python3 tools/ci/boot2_public_api_report.py --log ci-artifacts/boot2-public-api.log --status "${status}" --json-report ci-artifacts/boot2-public-api.json
          echo "status=${status}" >> "$GITHUB_OUTPUT"
          exit 0

      - name: 汇总 BOOT-2 守护结果
        run: |
          python3 tools/ci/boot2_summary.py \
            --report naming=ci-artifacts/boot2-naming.json \
            --report core-purity=ci-artifacts/boot2-core-purity.json \
            --report doc-density=ci-artifacts/boot2-doc-density.json \
            --report public-api=ci-artifacts/boot2-public-api.json \
            --markdown ci-artifacts/boot2-summary.md

      - name: 上传 BOOT-2 守护工件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: boot2-guard
          path: ci-artifacts

      - name: 发布 PR 注释（守护报告）
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const core = require('@actions/core');
            const path = 'ci-artifacts/boot2-summary.md';
            const marker = '<!-- boot2-guard -->';
            if (!fs.existsSync(path)) {
              core.warning('未找到 BOOT-2 摘要文件，跳过评论。');
              return;
            }
            const body = fs.readFileSync(path, 'utf8') + '\n' + marker;
            const { context, github } = require('@actions/github');
            const issue_number = context.issue.number;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              per_page: 100,
            });
            const existing = comments.find((comment) => comment.user.type === 'Bot' && comment.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                body,
              });
            }

      - name: 验证 BOOT-2 阶段结果（阻断）
        if: always()
        run: |
          set -euo pipefail
          declare -A CHECK_STATUS=(
            ["命名 lint"]='${{ steps.naming.outputs.status }}'
            ["spark-core 纯度"]='${{ steps.core_purity.outputs.status }}'
            ["文档密度检查"]='${{ steps.doc_density.outputs.status }}'
            ["公共 API 预算"]='${{ steps.public_api.outputs.status }}'
          )
          failure=0
          for check in "${!CHECK_STATUS[@]}"; do
            status="${CHECK_STATUS[$check]}"
            if [ -z "$status" ]; then
              echo "::error::检查 ${check} 未上报状态，视为失败。"
              failure=1
            elif [ "$status" != "0" ]; then
              echo "::error::检查 ${check} 未通过（退出码 ${status}）。"
              failure=1
            else
              echo "检查 ${check} 已通过。"
            fi
          done
          if [ "$failure" -ne 0 ]; then
            exit 1
          fi

  boot3-core-no-std:
    name: BOOT-3 spark-core no_std 预检 (${{ matrix.cargo_cmd }})
    needs: boot2-guard
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        cargo_cmd:
          - check
          - build
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: boot3-core-no-std
          cache-on-failure: true

      - name: 准备工件目录
        run: mkdir -p ci-artifacts

      - name: 执行 spark-core no_std alloc (${{ matrix.cargo_cmd }})
        id: boot3_run
        continue-on-error: true
        env:
          CI_ARTIFACT_DIR: ${{ github.workspace }}/ci-artifacts
          NO_STD_MATRIX_PACKAGES: spark-core
          NO_STD_MATRIX_CARGO_CMD: ${{ matrix.cargo_cmd }}
          NO_STD_MATRIX_LOG_SUFFIX: ${{ matrix.cargo_cmd }}
        run: |
          set +e
          set -o pipefail
          tools/ci/no_std_matrix.sh
          status=$?
          set +o pipefail
          echo "status=${status}" >> "$GITHUB_OUTPUT"
          exit "${status}"

      - name: 汇总 BOOT-3 执行结果
        if: always()
        env:
          STEP_STATUS: ${{ steps.boot3_run.outputs.status }}
          STEP_OUTCOME: ${{ steps.boot3_run.outcome }}
          CARGO_CMD: ${{ matrix.cargo_cmd }}
        run: |
          {
            echo "### BOOT-3 spark-core no_std(${CARGO_CMD})"
            if [ "${STEP_OUTCOME}" = "success" ]; then
              echo "- 结果：✅ 通过"
            else
              echo "- 结果：⚠️ 失败（已降级为警告，不阻断 CI）"
              echo "- 退出码：${STEP_STATUS:-未知}" 
              echo "::warning::spark-core no_std(${CARGO_CMD}) 验证失败，详见工件日志。"
            fi
            echo "- 日志：ci-artifacts/no-std-spark-core-${CARGO_CMD}.log"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: 上传 BOOT-3 工件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: boot3-spark-core-${{ matrix.cargo_cmd }}
          path: ci-artifacts/no-std-spark-core-${{ matrix.cargo_cmd }}.log
          if-no-files-found: warn
