name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  lint-and-docs:
    name: Lints & docs (MSRV)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ReadyState governance gate
        if: github.event_name == 'pull_request'
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: tools/ci/check_readystate_governance.sh

      - name: Consistency guardrails
        env:
          CONSISTENCY_BASE_SHA: ${{ github.event.pull_request.base.sha || '' }}
          CONSISTENCY_BASE_REF: ${{ github.base_ref || '' }}
        run: bash tools/ci/check_consistency.sh

      - name: Unified protocol governance gate
        run: tools/ci/check_unified_protocol_guard.sh

      - name: MSRV guardrails
        run: tools/ci/check_msrv_guard.sh

      - name: Install Rust 1.89 toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.89.0
          components: rustfmt, clippy

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: msrv-1.89
          cache-on-failure: true

      - name: Run formatting, clippy, and deprecation lints
        run: make ci-lints

      - name: Build docs without dependencies
        env:
          RUSTDOCFLAGS: -Dwarnings
        run: cargo doc --workspace --no-deps

  builds-and-benches:
    name: Builds & benches (MSRV)
    runs-on: ubuntu-latest
    needs: lint-and-docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust 1.89 toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.89.0

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: msrv-1.89
          cache-on-failure: true

      - name: Build default features
        run: make ci-zc-asm

      - name: Build alloc profile
        run: make ci-no-std-alloc

      - name: Doc warnings gate
        env:
          RUSTDOCFLAGS: -Dwarnings
        run: make ci-doc-warning

      - name: Bench smoke test
        run: make ci-bench-smoke

  semver:
    name: SemVer compatibility (MSRV)
    runs-on: ubuntu-latest
    needs: lint-and-docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust 1.89 toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.89.0

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: msrv-1.89
          cache-on-failure: true

      - name: Install cargo-semver-checks
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-semver-checks@0.44.0

      - name: Prepare SemVer baseline (origin/main)
        id: semver_baseline
        run: |
          set -euo pipefail
          git fetch origin main --depth=1
          baseline_dir=$(mktemp -d)
          git worktree add "$baseline_dir" origin/main
          echo "dir=$baseline_dir" >> "$GITHUB_OUTPUT"

      - name: Run cargo-semver-checks
        env:
          SEMVER_BASELINE_DIR: ${{ steps.semver_baseline.outputs.dir }}
        run: cargo semver-checks --manifest-path spark-core/Cargo.toml --baseline-root "$SEMVER_BASELINE_DIR/spark-core"

      - name: Cleanup SemVer baseline worktree
        if: always()
        env:
          SEMVER_BASELINE_DIR: ${{ steps.semver_baseline.outputs.dir }}
        run: |
          if [[ -n "${SEMVER_BASELINE_DIR:-}" ]]; then
            git worktree remove "$SEMVER_BASELINE_DIR" --force
          fi

  cargo-deny:
    name: License & advisory audit
    runs-on: ubuntu-latest
    needs: lint-and-docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust 1.89 toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.89.0

      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny@0.16.4

      - name: Check advisories, bans, licenses, and sources
        run: cargo deny check advisories bans licenses sources

  miri:
    name: Miri smoke tests
    runs-on: ubuntu-latest
    needs: lint-and-docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install nightly toolchain with Miri
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2024-12-31
          components: miri

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: nightly-miri
          cache-on-failure: true

      - name: Prepare Miri
        run: cargo +nightly-2024-12-31 miri setup

      - name: Run Miri tests
        run: cargo +nightly-2024-12-31 miri test --manifest-path spark-core/Cargo.toml --features std

  loom:
    name: Loom model checks (MSRV)
    runs-on: ubuntu-latest
    needs: lint-and-docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust 1.89 toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.89.0

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: msrv-1.89
          cache-on-failure: true

      - name: Run loom smoke tests
        env:
          RUSTFLAGS: --cfg loom
          LOOM_MAX_PREEMPTIONS: "2"
        run: cargo test --manifest-path spark-core/Cargo.toml --features loom-model,std --lib --tests
