/// 半关闭方向语义的统一枚举。
///
/// # 教案级注释
///
/// ## 意图（Why）
/// - 统一 TCP、TLS、QUIC 等传输协议在“优雅关闭”阶段的方向控制语义。
/// - 避免各实现自定义枚举导致的调用方分支爆炸，保证替换实现时无需额外改动业务代码。
///
/// ## 架构位置（Architecture）
/// - 作为 `spark-transport` 的核心基础类型，被 [`crate::TransportConnection`] 与具体实现共享。
/// - 协议实现需在处理关闭请求时匹配该枚举并调用平台特定 API。
///
/// ## 契约说明（What）
/// - `Write`：停止写方向。
/// - `Read`：停止读方向。
/// - `Both`：同时终止读写。
/// - **前置条件**：连接对象仍处于活跃状态。
/// - **后置条件**：协议实现必须据此执行半关闭或返回语义化错误。
///
/// ## 风险提示（Trade-offs）
/// - 某些协议（如 QUIC Stream）将 `Both` 解释为“先 FIN 再 STOP_SENDING”，实现需在文档中说明。
/// - 若底层协议不支持半关闭，应在匹配时返回错误或执行全关闭，避免静默失败。
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum ShutdownDirection {
    /// 关闭写方向，常用于发送完剩余数据后等待对端确认。
    Write,
    /// 关闭读方向，适合忽略后续入站数据但继续发送。
    Read,
    /// 同时关闭读写方向，等价于完全终止。
    Both,
}
