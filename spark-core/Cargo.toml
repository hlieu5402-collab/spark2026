[package]
name = "spark-core"
version = "0.1.0"
edition = "2024"
rust-version = "1.89"
authors = ["Gemini 架构组 <architecture@gemini.example>"]
license = "Apache-2.0"
description = "spark-core: 高性能、协议无关、分布式原生的异步通信框架核心契约"
build = "build.rs"

[lib]
name = "spark_core"
path = "src/lib.rs"
bench = false

[features]
default = ["std"]
# 兼容功能开关：默认关闭，后续按业务域逐步启用旧版信号的适配层。
compat_v0 = []
# 所有 API 契约均依赖 `alloc` 类型（Box/Arc/Vec）；禁用 `alloc` 无法构建对象安全 Future/Stream。
alloc = []
std = []
loom-model = ["dep:loom"]
std_json = ["dep:serde_json"]
error_contract_doc = ["dep:toml"]
observability_contract_doc = ["dep:toml"]
configuration_event_doc = ["dep:toml"]

[dependencies]
async-trait = { version = "0.1", default-features = false }
spark-macros = { path = "../crates/spark-macros" }
serde = { version = "1.0", default-features = false, features = ["derive", "alloc"] }
sha2 = { version = "0.10", default-features = false }
loom = { version = "0.7", default-features = false, optional = true }
spin = { version = "0.9", default-features = false, features = ["rwlock", "mutex", "spin_mutex"] }
libm = { version = "0.2" }
serde_json = { version = "1.0", optional = true }
toml = { version = "0.8", optional = true }

[dev-dependencies]
criterion = "0.5"
proptest = "1.5"
thiserror = "1.0"
spark-otel = { path = "../crates/spark-otel", features = ["test-util"] }
spark-contract-tests = { version = "0.1.0" }
futures = { version = "0.3", features = ["executor"] }
serde_json = "1.0"

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)', 'cfg(spark_loom)'] }

[[bench]]
name = "codec"
harness = false
[[bench]]
name = "smoke"
harness = false

[[bench]]
name = "configuration"
harness = false

[[bench]]
name = "buffer_roundtrip"
harness = false

[[bench]]
name = "async_contract_overhead"
harness = false

[[bench]]
name = "zerocopy_extremes"
harness = false

# 单独注册服务宏相关契约测试，避免引入完整 `contracts` 套件对内部模块的访问依赖。
[[test]]
name = "contracts_service_macro"
path = "tests/contracts/service_macro.rs"

[[test]]
name = "contracts_context_propagation_spawn"
path = "tests/contracts/context_propagation_spawn.rs"

[[test]]
name = "concurrency_primitives"
path = "tests/concurrency_primitives.rs"

[[test]]
name = "contracts_error_category_autoresponse"
path = "tests/contracts/error_category_autoresponse.rs"

[[test]]
name = "contracts_ready_state_matrix"
path = "tests/contracts/ready_state_matrix.rs"

[[test]]
name = "pipeline"
path = "tests/pipeline/mod.rs"

[[test]]
name = "observability"
path = "tests/observability/mod.rs"

[[test]]
name = "time"
path = "tests/time/mod.rs"

[[test]]
name = "retry"
path = "tests/retry/mod.rs"

[[bin]]
name = "audit_replay"
path = "src/bin/audit_replay.rs"
required-features = ["std", "std_json"]
bench = false
test = false

[[bin]]
name = "cancel_deadline_slo"
path = "src/bin/cancel_deadline_slo.rs"
required-features = ["std", "std_json"]
bench = false
test = false

[[bin]]
name = "gen_error_doc"
path = "../tools/gen_error_doc.rs"
required-features = ["std", "error_contract_doc"]
bench = false
test = false

[[bin]]
name = "gen_observability_doc"
path = "../tools/gen_observability_doc.rs"
required-features = ["std", "observability_contract_doc"]
bench = false
test = false

[[bin]]
name = "gen_config_events_doc"
path = "../tools/gen_config_events_doc.rs"
required-features = ["std", "configuration_event_doc"]
bench = false
test = false

[build-dependencies]
serde = { version = "1.0", features = ["derive"] }
toml = { version = "0.8" }
heck = "0.4"
